Original Load Data Method

public void loadData() {
        try {
            File myFile = new File("/resources/Key Record Sample.xlsx");

            FileInputStream fis = new FileInputStream(myFile);

            //Finds the workbook instance for XLSX file
            XSSFWorkbook myWorkBook = new XSSFWorkbook(fis);

            //Return first sheet from the XLSX workbook
            XSSFSheet sheetOne = myWorkBook.getSheetAt(0);

            //Get iterator to move through all rows in the sheet
            Iterator<Row> rowIterator = sheetOne.iterator();

            //Traverse over the row of the XLSX file
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                //For each row iterate through the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {

                    Cell cell = cellIterator.next();

                    switch (cell.getCellType()) {
                        case STRING:
                            System.out.println(cell.getStringCellValue() + "\t");
                            break;
                        case NUMERIC:
                            System.out.println(cell.getNumericCellValue() + "\t");
                            break;
                        case BOOLEAN:
                            System.out.println(cell.getBooleanCellValue() + "\t");
                            break;
                        case _NONE:
                            System.out.println(cell.getStringCellValue() + "\t");
                            break;

                        default:
                    }

                }
                System.out.println("");
            }

        } catch (Exception e) {
            System.out.println(e);
            System.exit(1);
        }

        ________________________________________________________________________________________________________________
Original Load Data Method

public void loadData() {
        try {
            File myFile = new File("/resources/Key Record Sample.xlsx");

            FileInputStream fis = new FileInputStream(myFile);

            //Finds the workbook instance for XLSX file
            XSSFWorkbook myWorkBook = new XSSFWorkbook(fis);

            //Return first sheet from the XLSX workbook
            XSSFSheet sheetOne = myWorkBook.getSheetAt(0);

            //Get iterator to move through all rows in the sheet
            Iterator<Row> rowIterator = sheetOne.iterator();

            //Traverse over the row of the XLSX file
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                //For each row iterate through the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {

                    Cell cell = cellIterator.next();

                    switch (cell.getCellType()) {
                        case STRING:
                            System.out.println(cell.getStringCellValue() + "\t");
                            break;
                        case NUMERIC:
                            System.out.println(cell.getNumericCellValue() + "\t");
                            break;
                        case BOOLEAN:
                            System.out.println(cell.getBooleanCellValue() + "\t");
                            break;
                        case _NONE:
                            System.out.println(cell.getStringCellValue() + "\t");
                            break;

                        default:
                    }

                }
                System.out.println("");
            }

        } catch (Exception e) {
            System.out.println(e);
            System.exit(1);
        }
        }

        ________________________________________________________________________________________________________________

        2D Array Resource

        // Declare the 2D array list
        ArrayList<ArrayList<String>> aObject;

        // Create the 2D array list
        aObject = new ArrayList<ArrayList<String>>();

        // Add an element to the first dimension
        aObject.add(new ArrayList<String>());

        // Place a string in position [0,0]
        aObject.get(0).add(new String("Quarks"));

        // Display the string in position [0,0]
        println(aObject.get(0).get(0).toString());


        ________________________________________________________________________________________________________________

       String basePath = new File("").getAbsolutePath();
               System.out.println(basePath);
               String path = new File("src/main/resources/Key Records Sample.xlsx").getAbsolutePath();
               System.out.println(path);








 KeyFinderGUI KF = new KeyFinderGUI();
        KeyFinderGUI.setNimbusFeel();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeyFinderGUI().setVisible(true);
            }
        });



        ________________________________________________________________________________________________________________


        switch (cell.getCellType()) {
                                case STRING:
                                    //System.out.println(cell.getStringCellValue() + "\t");
                                    if(org.apache.commons.lang3.StringUtils.isBlank(cell.getStringCellValue())) {
                                        fullRow += "[BLANK]" + "\t\t\t";
                                        spreadSheet.get(rowNum).add("[BLANK]");
                                    }else {
                                        fullRow += cell.getStringCellValue() + "\t\t\t";
                                        spreadSheet.get(rowNum).add(cell.getStringCellValue());
                                    }
                                    break;
                                case NUMERIC:
                                    //System.out.println(cell.getNumericCellValue() + "\t");
                                    fullRow += cell.getNumericCellValue() + "\t\t\t";
                                    spreadSheet.get(rowNum).add(String.valueOf(cell.getNumericCellValue()));
                                    break;
                                case BOOLEAN:
                                    //System.out.println(cell.getBooleanCellValue() + "\t");
                                    fullRow += cell.getBooleanCellValue() + "\t\t\t";
                                    spreadSheet.get(rowNum).add(String.valueOf(cell.getBooleanCellValue()));
                                    break;
                                case BLANK:
                                    //System.out.println("[BLANK]");
                                    fullRow += cell.getStringCellValue() + "\t\t";
                                    spreadSheet.get(rowNum).add("[BLANK]");
                                    break;
                                case _NONE:
                                    //System.out.println(cell.getStringCellValue() + "\t");
                                    fullRow += "[BLANK]" + "\t\t";
                                    spreadSheet.get(rowNum).add("[BLANK]");
                                    break;

                                default:
                                    fullRow += "[BLANK]" + "\t\t\t";
                                    spreadSheet.get(rowNum).add("[BLANK]");
                            }


                            null == cell ? "" : cell.toString()